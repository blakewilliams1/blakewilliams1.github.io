import{a as p}from"./chunk-VBJ3V7QI.js";import{a as h}from"./chunk-C42POZCK.js";import"./chunk-YVNYLJQL.js";import"./chunk-BUA36XJB.js";import{a as r,c as s,e as d,f as m}from"./chunk-QVW2PHQP.js";import"./chunk-7NWIRESD.js";import"./chunk-JOYVGXEL.js";import{Fb as i,Ua as l,kb as e,lb as t,mb as a}from"./chunk-6DXKY6MC.js";var c=class o{static \u0275fac=function(n){return new(n||o)};static \u0275cmp=l({type:o,selectors:[["flip-dot-display-page"]],decls:55,vars:0,consts:[[1,"divider"],["videoId","s94PscZJ5EE"],["loading","lazy","imgurId","NaGwOYr"],["loading","lazy","imgurId","7IVaHO5"],["loading","lazy","imgurId","KzctrIP"],["loading","lazy","imgurId","1mmVQLA","aspectRatio","1024 / 938"],["loading","lazy","imgurId","ITn7YlV"],["loop","","controls","","playsInline",""],["src","https://imgur.com/6z6NkLU.mp4","type","video/mp4"],["src","https://imgur.com/oezksWt.mp4","type","video/mp4"],["videoId","aqdh5Y02nFw"],["videoId","XeerZWMCzzU"],["href","https://en.wikipedia.org/wiki/Metaballs","target","_blank"],["videoId","2jxo8JOFlUs"],["videoId","aWOT9Bl-654"],["href","https://github.com/blakewilliams1/Flip-Dot-Project","target","_blank"]],template:function(n,u){n&1&&(e(0,"mat-card")(1,"mat-card-header")(2,"h1"),i(3,"Flip Dot Display"),t()(),a(4,"div",0),e(5,"mat-card-content")(6,"p"),i(7," Before covid, there was a massive wall of flip dot displays tiled together in the lobby of one of the buildings at my work. It had a Microsoft Kinect sensor on it, and whenever you got close enough it would cast a silhouette of your body onto the wall that would mimic your motions. It was incredibly fun and made a really satisfying shimmering noise when in use, as the metallic disks flickered back and forth across the screens. Here's a video (not of the same wall) that gives an idea of what it was like: "),t(),a(8,"youtube-placeholder",1),e(9,"p"),i(10," When everyone eventually started returning back to office, the wall had fallen into disrepair. An important 3rd party service it used on boot-up had been killed off while everyone was working from home, and the original maintainers of the wall had since left the company as well. Some folks attempted to revive it, but after several weeks of fruitless effort it was deemed not worth the time investment anymore. The panels were taken down and posted as up for grabs on the internal Makers email list. Naturally I grabbed a few and attempted to make a mini version of the original wall for myself! "),t(),e(11,"p"),i(12," I felt the first step was to make a chassis to hold together the panels, so I bought some aluminum L-bracket from Home Depot and salvaged some aluminum T-slot rail from the recycle bins at work. Here's a progress shot of the backing frame coming together. The T-slot rails are being cut down to size and joined together "),t(),a(13,"img",2),e(14,"p"),i(15," I drilled and cut aluminum L bracket down to size to hold the panels onto a larger rigid frame that was made from the T-slot rails. "),t(),a(16,"img",3),e(17,"p"),i(18," Here is the final result of the frame I built for the panels! The two triangular supports on the back can be adjusted to allow it to be angled more steeply upright, and the power supplies + raspberry PI will be mounted on the rails behind the display. "),t(),a(19,"img",4),e(20,"p"),i(21," Originally the display driver code was prototyped on an Arduino Uno. The mess of wires and a Raspberry Pi in the next photo was what I finally got working. I decided to go with a Raspberry Pi because there were convenient libraries for using cheap Intel RealSense depth cameras. The Raspberry Pi output is sent to a logic level shifter to convert from 3v to 5v, then finally that signal goes to a RS485 converter which the displays require. There is a lot small magnetic fields around the display to flip the discs, so they use RS485 twisted cabling to handle the large amount of electrical noise generated. "),t(),a(22,"img",5),e(23,"p"),i(24," I was having issues for the longest time getting the code to work on the Raspberry Pi even though it was working fine on the Arduino. This took an EMBARRASSINGLY long time to realize and I finally had to break out the oscilloscope and decode the data being sent from each device to find the delta (next image is how it was supposed to look). I was actually sending 3 extra empty bytes in front of each intended byte... there was a single line in my code where I accidentally converted an Arduino 'byte' type to 'int' which is 4x the size. \u{1F926}\u200D\u2642\uFE0F "),t(),a(25,"img",6),e(26,"p"),i(27," Here is an example of drawing text and individual pixels [TURN SOUND ON]. I wrote a simple library for drawing text, lines, points, and raw black/white bitmaps to the screen. "),t(),e(28,"video",7),a(29,"source",8),t(),e(30,"p"),i(31," This next video came from experimenting with finding the max refresh rate of the displays, which happens to be about 10 fps [TURN SOUND ON]. "),t(),e(32,"video",7),a(33,"source",9),t(),e(34,"p"),i(35," I ended up getting a fourth panel! After playing with it more I felt it definitely didn't have enough pixels to use it the way I wanted. After fixing a slew of other issues regarding data corruption when passing depth cam frames between processes on the raspberry pi, I finally got that portion of it working! "),t(),a(36,"youtube-placeholder",10),e(37,"p"),i(38," This was the main attraction of the flip dot wall to me; it's the tribute to the massive wall that these panels came from, and the bare minimum I'd do to feel like the project was a success, and now it is! "),t(),e(39,"p"),i(40,' After this I added on a few minigames to the project, mostly just because I could and it made the display feel more functional and fun. I started with making a quick clone of Flappy Bird, which I called "Flippy Bird" (good name idea, Chris!) '),t(),a(41,"youtube-placeholder",11),e(42,"p"),i(43," Then I added a lava lamp simulation with the rendering concept of "),e(44,"a",12),i(45,"metaballs"),t(),i(46," (not meatballs). "),t(),a(47,"youtube-placeholder",13),e(48,"p"),i(49," Then finally I added pong because why not! "),t(),a(50,"youtube-placeholder",14),e(51,"p"),i(52," I'm super happy I put in the time to finish this project, and maybe in the future I'll add some more cool features like chatGPT or Google Gemini integration if the depth camera I have has a microphone in it I can use. If you'd like to see the code I used to create this project, you can find it "),e(53,"a",15),i(54,"in this repo, on my Github"),t()()()())},dependencies:[h,m,r,s,d,p],styles:["[_nghost-%COMP%]{display:block;margin:auto;padding-bottom:1px;width:fit-content}mat-card[_ngcontent-%COMP%]{margin:20px 5%;max-width:1400px}mat-card-title[_ngcontent-%COMP%]{margin-top:20px!important}h1[_ngcontent-%COMP%]{margin-top:0}img[_ngcontent-%COMP%]{width:100%}video[_ngcontent-%COMP%]{min-height:130px;width:100%}.divider[_ngcontent-%COMP%]{border-top:1px solid white;margin-bottom:1em}.youtube-player[_ngcontent-%COMP%]{aspect-ratio:16/9;display:block;margin:1em 0;width:100%}"]})};export{c as FlipDotDisplayPage};
